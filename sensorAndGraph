import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;
import org.firmata4j.Pin;
import org.firmata4j.ssd1306.SSD1306;
import java.util.HashMap;
import edu.princeton.cs.introcs.StdDraw;
class moistureTask extends TimerTask {
    private final Pin moistureSensor;
    private final Pin blackPump;
    private final SSD1306 oledDisplay;
    private HashMap<Double, Double> myData;
    private  Pin stop;
    private Timer timer;
    moistureTask(Pin moistureSensor, Pin blackPump, SSD1306 oledDisplay, Pin stop, Timer timer) {
        this.moistureSensor = moistureSensor;
        this.blackPump = blackPump;
        this.oledDisplay = oledDisplay;
        this.myData = new HashMap<>();
        this.stop = stop;
        this.timer = timer;
    }

    @Override
    public void run() {

	   boolean stop = false;	
        double dry = 3.5;
        double moist = 2.8;
        double startTime = System.currentTimeMillis();
        double voltage = moistureSensor.getValue() /204.6;
		while (!stop){
            StdDraw.clear();

            StdDraw.setXscale(startTime-15000,startTime+15000);
            StdDraw.setYscale(0,5);

            StdDraw.setPenRadius(0.005);
            StdDraw.setPenColor(StdDraw.BLACK);

            StdDraw.line(startTime+13500,0,startTime+13500,5);
            StdDraw.line(0,0,startTime+13500,0);

            StdDraw.text(startTime,-0.12,"[Time (s): Updates Last 30s]");
            StdDraw.text(startTime+14450,2.5,"-2.5");
            StdDraw.text(startTime+15000,3,"[V]");
            StdDraw.text(startTime+14050,0,"-0");
            StdDraw.text(startTime-15900,-0.11,"30");
            StdDraw.text(startTime+14050,5,"-5");
            StdDraw.text(startTime,5,"Sensor Voltage vs Time [live]");

            myData.put(startTime+13000,voltage);
            myData.forEach((xValue,yValue)->StdDraw.text(xValue,yValue,"*"));

            if (voltage>dry) {
                try {
                    System.out.println("Plant requires hydration.");
                    oledDisplay.getCanvas().clear();
                    oledDisplay.getCanvas().drawString(0,0,"Dry. Pump On");
                    oledDisplay.display();
                    blackPump.setValue(1);
                    oledDisplay.clear();
                } catch (IOException ex) {
                }
            } else if(voltage>moist){
                try {
                    System.out.println("Plant needs a bit more watering.");
                    oledDisplay.getCanvas().clear();
                    oledDisplay.getCanvas().drawString(0,0,"Damp. Pump on.");
                    oledDisplay.display();
                    blackPump.setValue(1);
                    oledDisplay.getCanvas().clear();
                } catch (IOException ex) {
                }
            } else {
                try {
                    System.out.println("Plant does not need any more watering.");
                    oledDisplay.getCanvas().clear();
                    oledDisplay.getCanvas().drawString(0,0,"Wet. Pump turned off");
                    oledDisplay.display();
                    blackPump.setValue(0);
                    oledDisplay.getCanvas().clear();
                } catch (IOException ex) {
            }
                if (this.stop.getValue() == 1) {
                    timer.cancel();
                    timer.purge();
                    return;
            }



}}}}
